{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["App","props","state","sortBy","sort","errorLoading","isLoading","errorMessage","data","onClickSortHeader","bind","fetch","res","json","map","country","total","gold","silver","bronze","this","setState","undefined","clonedData","JSON","parse","stringify","a","b","e","target","hasAttribute","closest","getAttribute","getSortedData","className","data-qa","scope","data-sort-type","onClick","title","slice","i","key","code","data-qa-country-row","React","defaultProps","Boolean","window","location","hostname","match","container","ReactDOM","render","document","getElementById","widget","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea5482b7.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport Country from './interfaces';\n\nconst DATA_URI = 'https://s3-us-west-2.amazonaws.com/reuters.medals-widget/medals.json'\n\ninterface AppProps {\n  sort: string,\n}\n\ninterface AppState {\n  sortBy: string,\n  errorLoading: boolean,\n  isLoading: boolean,\n  errorMessage: string,\n  data: Country[]\n}\n\nclass App extends React.Component<AppProps, {}> {\n  constructor (props: AppProps) {\n    super(props)\n    // bind methods\n    this.onClickSortHeader = this.onClickSortHeader.bind(this)\n  }\n\n  static defaultProps: AppProps = {\n    sort: 'gold'\n  }\n\n  state: AppState = {\n    sortBy: this.props.sort ? this.props.sort : 'gold',\n    errorLoading: false,\n    isLoading: true,\n    errorMessage: '',\n    data: []\n  }\n\n  async componentDidMount() {\n     try {\n       const res = await fetch(DATA_URI)\n       let data: Country[] = await res.json()\n       data = data.map((country: Country) => {\n         // Create total property\n         country.total = country.gold + country.silver + country.bronze\n         return country\n       })\n\n       this.setState({\n         data,\n         isLoading: false\n       })\n     } catch(e) {\n       this.setState({\n        isLoading: false,\n        errorLoading: true\n        })\n     }\n\n  }\n\n  getSortedData (data: Country[] | undefined, sortBy: string) {\n    data = data !== undefined ? data : this.state.data\n    const clonedData = JSON.parse(JSON.stringify(data))\n\n    clonedData.sort((a: any, b: any) => {\n      if (a[sortBy] < b[sortBy]) { return 1}\n      if (a[sortBy] > b[sortBy]) { return -1}\n      if(sortBy === 'gold') {\n        if (a['silver'] < b['silver']) { return 1}\n        if (a['silver'] > b['silver']) { return -1}\n      } else {\n        if (a['gold'] < b['gold']) { return 1}\n        if (a['gold'] > b['gold']) { return -1}\n      }\n      return 0\n      // return b[sortBy] - a[sortBy]\n    })\n\n    return clonedData\n  }\n  onClickSortHeader (e: any) {\n    const {target} = e\n    const el = target.hasAttribute('data-sort-type') ? target : target.closest('[data-sort-type]')\n    const sort = el.getAttribute('data-sort-type')\n    const data: Country[] | undefined = this.getSortedData(undefined, sort)\n\n    this.setState({\n      data,\n      sortBy: sort\n    })\n  }\n\n  render (): React.ReactElement<any> {\n    const {isLoading, errorLoading, data, sortBy} = this.state\n\n    if(isLoading ) {\n      return (<p>Currently loading..</p>)\n    } else if(errorLoading) {\n      return (<p>Error loading results. Please contact a site admin</p>)\n    } else {\n      return (\n        <div className=\"App\">\n        <h2 className=\"medalsheader\">Medal Count</h2>\n          <table className=\"medalstable\" data-qa=\"medalstable\">\n            <thead>\n              <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\"></th>\n                <th\n                  scope=\"col\" data-sort-type=\"gold\"\n                  className={sortBy === 'gold' ? 'sorted': undefined}\n                  onClick={this.onClickSortHeader}\n                  title=\"Click to sort by Gold medals\"\n                >\n                  <span className=\"medal-icon medal-icon--gold\" />\n                </th>\n                <th\n                  scope=\"col\" data-sort-type=\"silver\"\n                  className={sortBy === 'silver' ? 'sorted': undefined}\n                  onClick={this.onClickSortHeader}\n                  title=\"Click to sort by Silver medals\"\n                  >\n                    <span className=\"medal-icon medal-icon--silver\" />\n                  </th>\n                <th\n                  scope=\"col\" data-sort-type=\"bronze\"\n                  className={sortBy === 'bronze' ? 'sorted': undefined}\n                  onClick={this.onClickSortHeader}\n                  title=\"Click to sort by Bronze medals\"\n                  >\n                    <span\n                      className=\"medal-icon medal-icon--bronze\" />\n                  </th>\n                <th scope=\"col\" data-sort-type=\"total\"\n                className={sortBy === 'total' ? 'sorted': undefined}\n                onClick={this.onClickSortHeader}\n                title=\"Click to sort by Total medals\"\n                >TOTAL</th>\n              </tr>\n            </thead>\n            <tbody>\n            {data && this.getSortedData(data, sortBy).slice(0, 10).map((country: Country, i: number) => (\n              <tr key={country.code} data-qa-country-row={country.code}>\n                <td>{i + 1}</td>\n                <td className=\"medalstable__country\">\n                  <span className={`flag flag--${country.code}`} />\n                  <span className=\"medalstable__text\">{country.code}</span>\n                </td>\n                <td>{country.gold}</td>\n                <td>{country.silver}</td>\n                <td>{country.bronze}</td>\n                <td><strong>{country.total}</strong></td>\n              </tr>\n            ))}\n            </tbody>\n          </table>\n        </div>\n      )\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst widget = {\n  initialize: function (container: string, sortBy: string) {\n    ReactDOM.render(\n      <App sort={sortBy}/>, document.getElementById(container)\n      );\n  }\n}\n\nwidget.initialize('root', 'gold')\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}